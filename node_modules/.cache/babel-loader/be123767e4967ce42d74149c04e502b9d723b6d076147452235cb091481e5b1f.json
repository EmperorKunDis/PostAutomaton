{"ast":null,"code":"import { create } from 'zustand';\nimport { authService } from '../services/authService';\nexport const useAuthStore = create((set, get) => ({\n  user: null,\n  isAuthenticated: false,\n  isLoading: false,\n  error: null,\n  login: async (email, password) => {\n    try {\n      set({\n        isLoading: true,\n        error: null\n      });\n      const authResponse = await authService.login({\n        email,\n        password\n      });\n      authService.saveAuthData(authResponse);\n      set({\n        user: authResponse.user,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      });\n    } catch (error) {\n      var _error$response;\n      set({\n        isLoading: false,\n        error: ((_error$response = error.response) == null || (_error$response = _error$response.data) == null ? void 0 : _error$response.message) || 'Login failed'\n      });\n      throw error;\n    }\n  },\n  register: async (email, name, password) => {\n    try {\n      set({\n        isLoading: true,\n        error: null\n      });\n      const authResponse = await authService.register({\n        email,\n        name,\n        password\n      });\n      authService.saveAuthData(authResponse);\n      set({\n        user: authResponse.user,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      });\n    } catch (error) {\n      var _error$response2;\n      set({\n        isLoading: false,\n        error: ((_error$response2 = error.response) == null || (_error$response2 = _error$response2.data) == null ? void 0 : _error$response2.message) || 'Registration failed'\n      });\n      throw error;\n    }\n  },\n  logout: async () => {\n    try {\n      await authService.logout();\n    } catch (error) {\n      // Continue with logout even if API call fails\n      console.error('Logout API call failed:', error);\n    } finally {\n      authService.clearAuthData();\n      set({\n        user: null,\n        isAuthenticated: false,\n        error: null\n      });\n    }\n  },\n  loadUserFromStorage: () => {\n    const token = authService.getStoredToken();\n    const user = authService.getStoredUser();\n    if (token && user) {\n      set({\n        user,\n        isAuthenticated: true\n      });\n    }\n  },\n  clearError: () => {\n    set({\n      error: null\n    });\n  }\n}));","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}