{"ast":null,"code":"import { create } from 'zustand';\nimport { authService } from '../services/authService';\nexport const useAuthStore = create((set, get) => ({\n  user: null,\n  isAuthenticated: false,\n  isLoading: false,\n  error: null,\n  login: async (email, password) => {\n    try {\n      set({\n        isLoading: true,\n        error: null\n      });\n      const authResponse = await authService.login({\n        email,\n        password\n      });\n      authService.saveAuthData(authResponse);\n      set({\n        user: authResponse.user,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      });\n    } catch (error) {\n      var _error$response;\n      set({\n        isLoading: false,\n        error: ((_error$response = error.response) == null || (_error$response = _error$response.data) == null ? void 0 : _error$response.message) || 'Login failed'\n      });\n      throw error;\n    }\n  },\n  register: async (email, name, password) => {\n    try {\n      set({\n        isLoading: true,\n        error: null\n      });\n      const authResponse = await authService.register({\n        email,\n        name,\n        password\n      });\n      authService.saveAuthData(authResponse);\n      set({\n        user: authResponse.user,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      });\n    } catch (error) {\n      var _error$response2;\n      set({\n        isLoading: false,\n        error: ((_error$response2 = error.response) == null || (_error$response2 = _error$response2.data) == null ? void 0 : _error$response2.message) || 'Registration failed'\n      });\n      throw error;\n    }\n  },\n  logout: async () => {\n    try {\n      await authService.logout();\n    } catch (error) {\n      // Continue with logout even if API call fails\n      console.error('Logout API call failed:', error);\n    } finally {\n      authService.clearAuthData();\n      set({\n        user: null,\n        isAuthenticated: false,\n        error: null\n      });\n    }\n  },\n  loadUserFromStorage: () => {\n    const token = authService.getStoredToken();\n    const user = authService.getStoredUser();\n    if (token && user) {\n      set({\n        user,\n        isAuthenticated: true\n      });\n    }\n  },\n  clearError: () => {\n    set({\n      error: null\n    });\n  }\n}));","map":{"version":3,"names":["create","authService","useAuthStore","set","get","user","isAuthenticated","isLoading","error","login","email","password","authResponse","saveAuthData","_error$response","response","data","message","register","name","_error$response2","logout","console","clearAuthData","loadUserFromStorage","token","getStoredToken","getStoredUser","clearError"],"sources":["/Users/martinsvanda/Prace/NekovarPraut/PostAutomaton/apps/web/src/stores/authStore.ts"],"sourcesContent":["import { create } from 'zustand';\nimport { User } from '@internal-marketing-content-app/shared';\nimport { authService } from '../services/authService';\n\ninterface AuthState {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n  \n  // Actions\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, name: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n  loadUserFromStorage: () => void;\n  clearError: () => void;\n}\n\nexport const useAuthStore = create<AuthState>((set, get) => ({\n  user: null,\n  isAuthenticated: false,\n  isLoading: false,\n  error: null,\n\n  login: async (email: string, password: string) => {\n    try {\n      set({ isLoading: true, error: null });\n      \n      const authResponse = await authService.login({ email, password });\n      authService.saveAuthData(authResponse);\n      \n      set({\n        user: authResponse.user,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      });\n    } catch (error: any) {\n      set({\n        isLoading: false,\n        error: error.response?.data?.message || 'Login failed'\n      });\n      throw error;\n    }\n  },\n\n  register: async (email: string, name: string, password: string) => {\n    try {\n      set({ isLoading: true, error: null });\n      \n      const authResponse = await authService.register({ email, name, password });\n      authService.saveAuthData(authResponse);\n      \n      set({\n        user: authResponse.user,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      });\n    } catch (error: any) {\n      set({\n        isLoading: false,\n        error: error.response?.data?.message || 'Registration failed'\n      });\n      throw error;\n    }\n  },\n\n  logout: async () => {\n    try {\n      await authService.logout();\n    } catch (error) {\n      // Continue with logout even if API call fails\n      console.error('Logout API call failed:', error);\n    } finally {\n      authService.clearAuthData();\n      set({\n        user: null,\n        isAuthenticated: false,\n        error: null\n      });\n    }\n  },\n\n  loadUserFromStorage: () => {\n    const token = authService.getStoredToken();\n    const user = authService.getStoredUser();\n    \n    if (token && user) {\n      set({\n        user,\n        isAuthenticated: true\n      });\n    }\n  },\n\n  clearError: () => {\n    set({ error: null });\n  }\n}));"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}